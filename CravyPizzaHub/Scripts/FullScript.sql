--------------------------------------------------------
--  File created - Tuesday-December-12-2023   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Table APPLIED_PROMOTIONS
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."APPLIED_PROMOTIONS" 
   (  "APPLIEDPROMOTIONID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "ORDERID" NUMBER, 
  "PROMOTIONID" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table CART
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."CART" 
   (  "CARTID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "USERID" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table CART_ITEMS
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."CART_ITEMS" 
   (  "CARTITEMID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "CARTID" NUMBER, 
  "PRODUCTID" NUMBER, 
  "QUANTITY" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table CATEGORIES
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."CATEGORIES" 
   (  "CATEGORYID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "CATEGORYNAME" NVARCHAR2(50), 
  "ENABLED" NUMBER(1,0) DEFAULT 1, 
  "DISABLED_DATE" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table NOTIFICATIONS
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."NOTIFICATIONS" 
   (  "NOTIFICATIONID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "USERID" NUMBER, 
  "MESSAGE" NVARCHAR2(255), 
  "TIMESTAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table ORDERS
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."ORDERS" 
   (  "ORDERID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "USERID" NUMBER, 
  "ORDERDATE" TIMESTAMP (6) DEFAULT CURRENT_TIMESTAMP, 
  "TOTALAMOUNT" NUMBER(10,2), 
  "PAYMENTMETHODID" NUMBER, 
  "SHIPPINGMETHODID" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table ORDER_ITEMS
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."ORDER_ITEMS" 
   (  "ORDERITEMID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "ORDERID" NUMBER, 
  "PRODUCTID" NUMBER, 
  "QUANTITY" NUMBER, 
  "SUBTOTAL" NUMBER(10,2)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table PAYMENT_METHODS
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."PAYMENT_METHODS" 
   (  "PAYMENTMETHODID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "PAYMENTMETHODNAME" NVARCHAR2(50), 
  "ENABLED" NUMBER(1,0) DEFAULT 1
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table PRODUCTS
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."PRODUCTS" 
   (  "PRODUCTID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "NAME" NVARCHAR2(100), 
  "DESCRIPTION" NVARCHAR2(255), 
  "PRICE" NUMBER(10,2), 
  "STOCKQUANTITY" NUMBER, 
  "CATEGORYID" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table PRODUCT_REVIEWS
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."PRODUCT_REVIEWS" 
   (  "REVIEWID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "USERID" NUMBER, 
  "PRODUCTID" NUMBER, 
  "RATING" NUMBER(3,1), 
  "COMMENTS" NVARCHAR2(255), 
  "TIMESTAMP" TIMESTAMP (6)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table PROMOTIONS
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."PROMOTIONS" 
   (  "PROMOTIONID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "PROMOTIONNAME" NVARCHAR2(100), 
  "DISCOUNTAMOUNT" NUMBER(10,2), 
  "STARTDATE" DATE, 
  "ENDDATE" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table REWARDS
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."REWARDS" 
   (  "REWARDID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "USERID" NUMBER, 
  "POINTS" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table ROLES
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."ROLES" 
   (  "ROLEID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "ROLENAME" NVARCHAR2(50)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table SHIPPING_METHODS
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."SHIPPING_METHODS" 
   (  "SHIPPINGMETHODID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "SHIPPINGMETHODNAME" NVARCHAR2(50), 
  "SHIPPINGCOST" NUMBER(10,2)
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."USERS" 
   (  "USERID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "USERNAME" NVARCHAR2(50), 
  "PASSWORD" NVARCHAR2(255), 
  "EMAIL" NVARCHAR2(100), 
  "FIRSTNAME" NVARCHAR2(50), 
  "LASTNAME" NVARCHAR2(50), 
  "ADDRESS" NVARCHAR2(255), 
  "PHONE" NVARCHAR2(15), 
  "LAST_LOGIN" DATE, 
  "REQUIRE_CHANGE_PASSWORD" NUMBER(1,0) DEFAULT 1, 
  "ENABLED" NUMBER(1,0) DEFAULT 1, 
  "DISABLED_DATE" DATE
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Table USER_ROLES
--------------------------------------------------------

  CREATE TABLE "CRAVYDEV"."USER_ROLES" 
   (  "USER_ROLEID" NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER  NOCYCLE  NOKEEP  NOSCALE , 
  "USERID" NUMBER, 
  "ROLEID" NUMBER
   ) SEGMENT CREATION DEFERRED 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for View CARTITEMSVIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CRAVYDEV"."CARTITEMSVIEW" ("CARTITEMID", "CARTID", "PRODUCTID", "QUANTITY") AS 
  SELECT CartItemID, CartID, ProductID, Quantity
FROM Cart_Items
;
--------------------------------------------------------
--  DDL for View CART_COMBINADO
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CRAVYDEV"."CART_COMBINADO" ("CARTID", "USERID", "CARTITEMID", "PRODUCTID", "QUANTITY", "USERNAME") AS 
  SELECT
    c.CARTID,
    c.USERID,
    ci.CARTITEMID,
    ci.PRODUCTID,
    ci.QUANTITY,
    u.USERNAME
FROM
    cart c
JOIN
    cart_items ci ON c.CARTID = ci.CARTID
JOIN
    users u ON c.USERID = u.USERID
;
--------------------------------------------------------
--  DDL for View COMPRAS_CON_DESCUENTOS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CRAVYDEV"."COMPRAS_CON_DESCUENTOS" ("ORDERID", "TOTALAMOUNT", "PROMOTIONNAME", "STARTDATE", "ENDDATE", "DISCOUNTAMOUNT", "FIRSTNAME", "LASTNAME") AS 
  SELECT
    o.ORDERID,
    o.TOTALAMOUNT,
    p.PROMOTIONNAME,
    p.STARTDATE,
    p.ENDDATE,
    p.DISCOUNTAMOUNT,
    u.FIRSTNAME,
    u.LASTNAME
FROM
    orders o
JOIN
    applied_promotions ap ON o.ORDERID = ap.ORDERID
JOIN
    promotions p ON ap.PROMOTIONID = p.PROMOTIONID
JOIN
    users u ON o.USERID = u.USERID
;
--------------------------------------------------------
--  DDL for View ORDERS_TOTAL_AMOUNT_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CRAVYDEV"."ORDERS_TOTAL_AMOUNT_VIEW" ("ORDERID", "USERID", "ORDERDATE", "TOTALAMOUNT", "PAYMENTMETHODID", "SHIPPINGMETHODID") AS 
  SELECT
    ORDERID,
    USERID,
    ORDERDATE,
    TOTALAMOUNT,
    PAYMENTMETHODID,
    SHIPPINGMETHODID
FROM
    orders
WHERE
    TRUNC(ORDERDATE) = TRUNC(SYSDATE)
;
--------------------------------------------------------
--  DDL for View PRODUCT_CATEGORY_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CRAVYDEV"."PRODUCT_CATEGORY_VIEW" ("PRODUCTID", "PRODUCT_NAME", "DESCRIPTION", "PRICE", "STOCKQUANTITY", "CATEGORYID", "CATEGORY_NAME") AS 
  SELECT
    p.PRODUCTID,
    p.NAME AS PRODUCT_NAME,
    p.DESCRIPTION,
    p.PRICE,
    p.STOCKQUANTITY,
    c.CATEGORYID,
    c.CATEGORYNAME AS CATEGORY_NAME
FROM
    products p
JOIN
    categories c ON p.CATEGORYID = c.CATEGORYID
;
--------------------------------------------------------
--  DDL for View PRODUCT_REVIEWS_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CRAVYDEV"."PRODUCT_REVIEWS_VIEW" ("REVIEWID", "USERID", "PRODUCTID", "PRODUCT_NAME", "RATING", "COMMENTS", "TIMESTAMP") AS 
  SELECT
    pr.REVIEWID,
    pr.USERID,
    pr.PRODUCTID,
    p.NAME AS PRODUCT_NAME,
    pr.RATING,
    pr.COMMENTS,
    pr.TIMESTAMP
FROM
    product_reviews pr
JOIN
    products p ON pr.PRODUCTID = p.PRODUCTID
;
--------------------------------------------------------
--  DDL for View REWARDSVIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CRAVYDEV"."REWARDSVIEW" ("REWARDID", "USERID", "POINTS") AS 
  SELECT RewardId, UserID, Points
FROM Rewards
;
--------------------------------------------------------
--  DDL for View TOTAL_PRODUCTS_BY_CATEGORY_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CRAVYDEV"."TOTAL_PRODUCTS_BY_CATEGORY_VIEW" ("CATEGORYID", "TOTAL_PRODUCTS") AS 
  SELECT
    CATEGORYID,
    COUNT(*) AS total_products
FROM
    products
GROUP BY
    CATEGORYID
;
--------------------------------------------------------
--  DDL for View TOTAL_PRODUCTS_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CRAVYDEV"."TOTAL_PRODUCTS_VIEW" ("TOTAL_PRODUCTS") AS 
  SELECT
    COUNT(*) AS total_products
FROM
    products
;
--------------------------------------------------------
--  DDL for View USER_REWARDS_VIEW
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CRAVYDEV"."USER_REWARDS_VIEW" ("USERNAME", "FIRSTNAME", "LASTNAME", "PHONE", "REWARDID", "USERID", "TOTAL OF POINTS") AS 
  SELECT
    u.USERNAME,
    u.FIRSTNAME,
    u.LASTNAME,
    u.PHONE,
    r.REWARDID,
    r.USERID,
    r.POINTS AS "TOTAL OF POINTS"
FROM
    users u
JOIN
    rewards r ON u.USERID = r.USERID
;
--------------------------------------------------------
--  DDL for View VIEW_USERSWITHROLES
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CRAVYDEV"."VIEW_USERSWITHROLES" ("USERID", "USERNAME", "EMAIL", "FIRSTNAME", "LASTNAME", "ADDRESS", "PHONE", "LAST_LOGIN", "USER_ROLEID", "ROLEID", "ROLENAME") AS 
  SELECT U.UserID, U.Username, U.Email, U.FirstName, U.LastName, U.Address, U.Phone, U.Last_Login,
       UR.User_RoleID, R.RoleID, R.RoleName
FROM Users U
LEFT JOIN User_Roles UR ON U.UserID = UR.UserID
LEFT JOIN Roles R ON UR.RoleID = R.RoleID
;
--------------------------------------------------------
--  DDL for View VISTASHIPPINGMETHODS
--------------------------------------------------------

  CREATE OR REPLACE FORCE EDITIONABLE VIEW "CRAVYDEV"."VISTASHIPPINGMETHODS" ("SHIPPINGMETHODID", "SHIPPINGMETHODNAME", "SHIPPINGCOST") AS 
  SELECT ShippingMethodId, ShippingMethodName, ShippingCost
FROM Shipping_Methods
;
REM INSERTING into CRAVYDEV.APPLIED_PROMOTIONS
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.CART
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.CART_ITEMS
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.CATEGORIES
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.NOTIFICATIONS
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.ORDERS
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.ORDER_ITEMS
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.PAYMENT_METHODS
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.PRODUCTS
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.PRODUCT_REVIEWS
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.PROMOTIONS
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.REWARDS
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.ROLES
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.SHIPPING_METHODS
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.USERS
SET DEFINE OFF;
REM INSERTING into CRAVYDEV.USER_ROLES
SET DEFINE OFF;
--------------------------------------------------------
--  DDL for Index UC_USER_ROLES_USERID_ROLEID
--------------------------------------------------------

  CREATE UNIQUE INDEX "CRAVYDEV"."UC_USER_ROLES_USERID_ROLEID" ON "CRAVYDEV"."USER_ROLES" ("USERID", "ROLEID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB" ;
--------------------------------------------------------
--  DDL for Trigger CHECKQUANTITYTRIGGER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CRAVYDEV"."CHECKQUANTITYTRIGGER" 
BEFORE INSERT OR UPDATE ON Cart_Items
FOR EACH ROW
BEGIN
    IF :NEW.Quantity < 10 THEN
        -- Puedes realizar acciones adicionales aquí, como generar un mensaje de error o registrar la información.
        RAISE_APPLICATION_ERROR(-20001, 'La cantidad no puede ser inferior a 10.');
    END IF;
END;

/
ALTER TRIGGER "CRAVYDEV"."CHECKQUANTITYTRIGGER" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PREVENT_DUPLICATE_CATEGORY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CRAVYDEV"."PREVENT_DUPLICATE_CATEGORY" 
BEFORE INSERT ON categories
FOR EACH ROW
DECLARE
    existing_category_count NUMBER;
BEGIN
    -- Verificar si la categorÃ­a ya existe
    SELECT COUNT(*)
    INTO existing_category_count
    FROM categories
    WHERE UPPER(CATEGORYNAME) = UPPER(:NEW.CATEGORYNAME);

    -- Si la categorÃ­a ya existe, realizar un rollback y no insertar la nueva categorÃ­a
    IF existing_category_count > 0 THEN
        :NEW.CATEGORYID := NULL; -- Anular el intento de inserciÃ³n asignando NULL a CATEGORYID
        :NEW.CATEGORYNAME := NULL; -- Anular el intento de inserciÃ³n asignando NULL a CATEGORYNAME
        :NEW.ENABLED := NULL; -- Anular el intento de inserciÃ³n asignando NULL a ENABLED
        :NEW.DISABLED_DATE := NULL; -- Anular el intento de inserciÃ³n asignando NULL a DISABLED_DATE
    ELSE
        -- Si la categorÃ­a no existe, permitir la inserciÃ³n
        NULL; -- No es necesario hacer nada
    END IF;
END;

/
ALTER TRIGGER "CRAVYDEV"."PREVENT_DUPLICATE_CATEGORY" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PREVENT_DUPLICATE_PAYMENT_METHOD
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CRAVYDEV"."PREVENT_DUPLICATE_PAYMENT_METHOD" 
BEFORE INSERT ON payment_methods
FOR EACH ROW
DECLARE
    existing_payment_method_count NUMBER;
BEGIN
    -- Verificar si el mÃ©todo de pago ya existe
    SELECT COUNT(*)
    INTO existing_payment_method_count
    FROM payment_methods
    WHERE UPPER(PAYMENTMETHODNAME) = UPPER(:NEW.PAYMENTMETHODNAME);

    -- Si el mÃ©todo de pago ya existe, lanzar una excepciÃ³n
    IF existing_payment_method_count > 0 THEN
        raise_application_error(-20001, 'Ya existe un mÃ©todo de pago con el mismo nombre en la tabla.');
    END IF;
END;

/
ALTER TRIGGER "CRAVYDEV"."PREVENT_DUPLICATE_PAYMENT_METHOD" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PREVENT_DUPLICATE_PRODUCT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CRAVYDEV"."PREVENT_DUPLICATE_PRODUCT" 
BEFORE INSERT ON products
FOR EACH ROW
DECLARE
    existing_product_count NUMBER;
BEGIN
    -- Verificar si ya existe un producto con el mismo nombre
    SELECT COUNT(*)
    INTO existing_product_count
    FROM products
    WHERE UPPER(name) = UPPER(:NEW.name);

    -- Si ya existe un producto con el mismo nombre, lanzar una excepciÃ³n
    IF existing_product_count > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'Ya existe un producto con el mismo nombre en la tabla.');
    END IF;
END;

/
ALTER TRIGGER "CRAVYDEV"."PREVENT_DUPLICATE_PRODUCT" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PREVENT_DUPLICATE_USER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "CRAVYDEV"."PREVENT_DUPLICATE_USER" 
BEFORE INSERT ON users
FOR EACH ROW
DECLARE
    existing_user_count NUMBER;
BEGIN
    -- Verificar si el usuario ya existe
    SELECT COUNT(*)
    INTO existing_user_count
    FROM users
    WHERE UPPER(USERNAME) = UPPER(:NEW.USERNAME);

    -- Si el usuario ya existe, lanzar una excepciÃ³n
    IF existing_user_count > 0 THEN
        raise_application_error(-20001, 'Ya existe un usuario con el mismo nombre en la tabla.');
    END IF;
END;

/
ALTER TRIGGER "CRAVYDEV"."PREVENT_DUPLICATE_USER" ENABLE;
--------------------------------------------------------
--  DDL for Procedure ASSIGNROLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."ASSIGNROLE" (
   p_UserID IN NUMBER,
   p_RoleID IN NUMBER,
   p_UserRoleID OUT NUMBER
) AS
   duplicate_key EXCEPTION;
   PRAGMA EXCEPTION_INIT(duplicate_key, -1); -- Adjust the error code based on your database

BEGIN
   BEGIN
      INSERT INTO User_Roles (UserID, RoleID)
      VALUES (p_UserID, p_RoleID)
      RETURNING User_RoleID INTO p_UserRoleID;
   EXCEPTION
      WHEN DUP_VAL_ON_INDEX THEN
         RAISE duplicate_key;
   END;
END AssignRole;

/
--------------------------------------------------------
--  DDL for Procedure DELETECATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."DELETECATEGORY" (
   p_CATEGORYID IN NUMBER,
   p_CATEGORYNAME IN NVARCHAR2
)
AS
   p_Success NUMBER := 0;  -- Declaración de la variable p_Success
BEGIN
   DELETE FROM categories
   WHERE CATEGORYID = p_CATEGORYID;

   IF SQL%ROWCOUNT > 0 THEN
      p_Success := 1; -- Eliminado
   ELSE
      p_Success := 0; -- No eliminado
   END IF;

   COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETEORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."DELETEORDER" (
    p_OrderID IN NUMBER
)
IS
BEGIN
    DELETE FROM Orders
    WHERE OrderID = p_OrderID;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETEPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."DELETEPRODUCT" (
    p_ProductID IN NUMBER,
    p_Success OUT NUMBER
)
AS
BEGIN
    DELETE FROM products
    WHERE productId = p_productid;

    IF SQL%ROWCOUNT > 0 THEN
        p_Success := 1; -- Deleted
    ELSE
        p_Success := 0; -- Not deleted
    END IF;
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure DELETEPROMOTION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."DELETEPROMOTION" (
    p_PromotionID IN NUMBER
)
IS
BEGIN
    DELETE FROM Promotions
    WHERE PromotionID = p_PromotionID;
    COMMIT;
END DeletePromotion;

/
--------------------------------------------------------
--  DDL for Procedure DELETEREVIEW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."DELETEREVIEW" (
    p_ReviewID IN NUMBER
)
IS
BEGIN
    DELETE FROM Product_Reviews WHERE ReviewID = p_ReviewID;
    COMMIT;
END DeleteReview;

/
--------------------------------------------------------
--  DDL for Procedure DELETEREWARD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."DELETEREWARD" (
    p_RewardID IN Rewards.RewardID%TYPE
) AS
BEGIN
    DELETE FROM Rewards
    WHERE RewardID = p_RewardID;
    COMMIT;
END DeleteReward;

/
--------------------------------------------------------
--  DDL for Procedure DELETEROLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."DELETEROLE" (
    p_RoleID IN NUMBER,
    p_RowsAffected OUT NUMBER
)
IS
    v_UserCount NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_UserCount
    FROM User_Roles
    WHERE RoleID = p_RoleID;

    IF v_UserCount > 0 THEN
        RAISE_APPLICATION_ERROR(-20001, 'No se puede elimianr el rol. Existen usuarios asignados al rol.');
    ELSE
        DELETE FROM Roles WHERE RoleID = p_RoleID;
        p_RowsAffected := SQL%ROWCOUNT;
        COMMIT;
    END IF;
END DeleteRole;

/
--------------------------------------------------------
--  DDL for Procedure DELETEUSERROLES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."DELETEUSERROLES" (
    p_UserRoleID IN NUMBER,
    p_Success OUT NUMBER
)
AS
BEGIN
    DELETE FROM User_Roles
    WHERE User_RoleID = p_UserRoleID;

    IF SQL%ROWCOUNT > 0 THEN
        p_Success := 1; -- Deleted
    ELSE
        p_Success := 0; -- Not deleted
    END IF;
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure DISABLECATEGORIES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."DISABLECATEGORIES" (
    pCategoryID IN NUMBER,
    pEnabled IN NUMBER,
    pIsUpdated OUT NUMBER
)
IS
BEGIN
    pIsUpdated := 0;

    SELECT COUNT(*)
    INTO pIsUpdated
    FROM Categories
    WHERE CategoryID = pCategoryID;

    IF pIsUpdated = 1 THEN
        UPDATE Categories
        SET Enabled = pEnabled
        WHERE CategoryID = pCategoryID;

        UPDATE Categories
        SET Disabled_Date = CASE
            WHEN pEnabled = 0 THEN SYSDATE
            ELSE NULL
        END
        WHERE CategoryID = pCategoryID;
    END IF;
END;

/
--------------------------------------------------------
--  DDL for Procedure DISABLEPAYMENTMETHOD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."DISABLEPAYMENTMETHOD" (
    p_PaymentMethodID IN NUMBER,
    p_Enabled IN NUMBER,
    p_WasChanged OUT NUMBER
)
IS
BEGIN
    p_WasChanged := 0;

    UPDATE Payment_Methods
    SET enabled = p_Enabled
    WHERE PaymentMethodID = p_PaymentMethodID;

    IF SQL%ROWCOUNT > 0 THEN
        p_WasChanged := 1;
    END IF;

    COMMIT;
END DisablePaymentMethod;

/
--------------------------------------------------------
--  DDL for Procedure DISABLEUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."DISABLEUSER" (
    pUserID IN NUMBER,
    pEnabled IN NUMBER, -- Updating the parameter to match the field type in the table
    pIsUpdated OUT NUMBER
)
IS
BEGIN
    pIsUpdated := 0;

    SELECT COUNT(*)
    INTO pIsUpdated
    FROM Users
    WHERE UserID = pUserID;

    IF pIsUpdated = 1 THEN
        UPDATE Users
        SET Enabled = pEnabled,
            Disabled_Date = CASE
                WHEN pEnabled = 0 THEN SYSDATE  
                ELSE NULL 
            END
        WHERE UserID = pUserID;
    END IF;
END;

/
--------------------------------------------------------
--  DDL for Procedure GETALLCATEGORIES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."GETALLCATEGORIES" (
    p_Result OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN p_Result FOR
    SELECT CategoryID, CategoryName, Enabled
    FROM Categories
    WHERE Enabled = 1;
END GetAllCategories;

/
--------------------------------------------------------
--  DDL for Procedure GETALLORDERS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."GETALLORDERS" (
    p_ordenes OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN p_ordenes FOR
    SELECT * FROM Orders;
END GetAllOrders;

/
--------------------------------------------------------
--  DDL for Procedure GETALLPAYMENTMETHODS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."GETALLPAYMENTMETHODS" (
    p_Result OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN p_Result FOR
    SELECT PaymentMethodID, PaymentMethodName, Enabled FROM Payment_Methods WHERE Enabled = 1;
END GetAllPaymentMethods;

/
--------------------------------------------------------
--  DDL for Procedure GETALLPRODUCTS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."GETALLPRODUCTS" (
    p_products OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_products FOR
    SELECT
        PRODUCTS.productid,
        PRODUCTS.NAME,
        PRODUCTS.description,
        PRODUCTS.price,
        PRODUCTS.stockquantity,
        PRODUCTS.categoryid
    FROM products;
END;

/
--------------------------------------------------------
--  DDL for Procedure GETALLPROMOTIONS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."GETALLPROMOTIONS" (
    p_Cursor OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN p_Cursor FOR
    SELECT PromotionID, PromotionName, DiscountAmount, StartDate, EndDate
    FROM Promotions;
END GetAllPromotions;

/
--------------------------------------------------------
--  DDL for Procedure GETALLREVIEWS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."GETALLREVIEWS" (
    p_Review OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN p_Review FOR
    SELECT * FROM Product_Reviews;
END GetAllReviews;

/
--------------------------------------------------------
--  DDL for Procedure GETALLREWARDS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."GETALLREWARDS" (
    p_RewardInfo OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_RewardInfo FOR
    SELECT *
    FROM Rewards;
END GetAllRewards;

/
--------------------------------------------------------
--  DDL for Procedure GETALLROLES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."GETALLROLES" (
    p_Result OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN p_Result FOR
    SELECT RoleID, RoleName FROM Roles;
END GetAllRoles;

/
--------------------------------------------------------
--  DDL for Procedure GETALLUSERROLES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."GETALLUSERROLES" (
   p_Result OUT SYS_REFCURSOR
) AS
BEGIN
   OPEN p_Result FOR
      SELECT UR.User_RoleId, UR.userId, UR.RoleId , U.UserName, R.RoleName
      FROM Users U
      JOIN User_Roles UR ON U.UserID = UR.UserID
      JOIN Roles R ON UR.RoleId = R.RoleID;
END GetAllUserRoles;

/
--------------------------------------------------------
--  DDL for Procedure GETALLUSERS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."GETALLUSERS" (
    p_users OUT SYS_REFCURSOR
)
AS
BEGIN
    OPEN p_users FOR
    SELECT
        USERS.USERID,
        USERS.USERNAME,
        USERS.PASSWORD,
        USERS.EMAIL,
        USERS.FIRSTNAME,
        USERS.LASTNAME,
        USERS.ADDRESS,
        USERS.PHONE,
        USERS.Enabled
    FROM USERS;
END;

/
--------------------------------------------------------
--  DDL for Procedure GETNOTIFICATIONBYID
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."GETNOTIFICATIONBYID" (
    p_NOTIFICATIONID IN NUMBER,
    p_Notification OUT SYS_REFCURSOR
)
IS
BEGIN
    OPEN p_Notification FOR
        SELECT NotificationID, UserID, Message, Timestamp
        FROM Notifications
        WHERE NotificationID = p_NOTIFICATIONID;



EXCEPTION
    WHEN OTHERS THEN

        RAISE;
END GetNotificationByID;

/
--------------------------------------------------------
--  DDL for Procedure GETUSERROLESBYUSERNAME
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."GETUSERROLESBYUSERNAME" (
    p_UserRoles OUT SYS_REFCURSOR,
    p_UserName IN NVARCHAR2 -- New parameter for UserName
)
AS
BEGIN
    OPEN p_UserRoles FOR
    SELECT 
        UserID, Username, Email, FirstName, LastName, Address, Phone, Last_Login,
        User_RoleID, RoleID, RoleName
    FROM View_UsersWithRoles
    WHERE User_RoleID IS NOT NULL
    AND Username = p_UserName; -- Filter by UserName
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTCATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."INSERTCATEGORY" (
    p_CategoryName IN NVARCHAR2,
    p_Enabled IN NUMBER,
    p_CategoryID OUT NUMBER
)
IS
BEGIN    
    INSERT INTO Categories (
        CategoryName, Enabled
    ) VALUES (
        p_CategoryName, p_Enabled
    ) RETURNING CategoryID INTO p_CategoryID;

    COMMIT;
END InsertCategory;

/
--------------------------------------------------------
--  DDL for Procedure INSERTNOTIFICATIONS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."INSERTNOTIFICATIONS" (  
    p_USERID IN NUMBER,
        p_MESSAGE  IN NVARCHAR2,
        p_TIMESTAMP IN TIMESTAMP
)
IS
BEGIN
    INSERT INTO notifications (USERID,MESSAGE,TIMESTAMP )
    VALUES ( p_USERID, p_MESSAGE, p_TIMESTAMP);
    COMMIT;
END InsertNotifications;

/
--------------------------------------------------------
--  DDL for Procedure INSERTORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."INSERTORDER" (
    p_UserID IN NUMBER,
    p_TotalAmount IN NUMBER,
    p_PaymentMethodID IN NUMBER,
    p_ShippingMethodID IN NUMBER,
    p_OrderID OUT NUMBER
)
IS
BEGIN
    INSERT INTO Orders (UserID, TotalAmount, PaymentMethodID, ShippingMethodID)
    VALUES (p_UserID, p_TotalAmount, p_PaymentMethodID, p_ShippingMethodID)
    RETURNING OrderID INTO p_OrderID;
END;

/
--------------------------------------------------------
--  DDL for Procedure INSERTPAYMENTMETHOD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."INSERTPAYMENTMETHOD" (
    p_PaymentMethodName IN NVARCHAR2,
    p_Enabled IN NUMBER,
    p_PaymentMethodID OUT NUMBER
)
IS
BEGIN    
    INSERT INTO Payment_Methods (
        PaymentMethodName, Enabled
    ) VALUES (
        p_PaymentMethodName, p_Enabled
    ) RETURNING PaymentMethodID INTO p_PaymentMethodID;

    COMMIT;
END InsertPaymentMethod;

/
--------------------------------------------------------
--  DDL for Procedure INSERTPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."INSERTPRODUCT" (
    p_name IN NVARCHAR2,
    p_description IN NVARCHAR2,
    p_price IN NUMBER,
    p_stockquantity IN NUMBER,
    p_productId OUT NUMBER,    
    p_categoryId IN NUMBER
)
IS
BEGIN    
    BEGIN
        INSERT INTO products (
            name, description, price, stockquantity, categoryId
        ) VALUES (
            p_name, p_description, p_price, p_stockquantity, p_categoryId
        ) RETURNING productId INTO p_productId;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK;
            -- Manejar la excepciÃ³n generada por el trigger
            IF SQLCODE = -20001 THEN
                DBMS_OUTPUT.PUT_LINE('Error al insertar el producto: Ya existe un producto con el mismo nombre.');
            ELSE
                RAISE;
            END IF;
    END;
END InsertProduct;

/
--------------------------------------------------------
--  DDL for Procedure INSERTPROMOTION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."INSERTPROMOTION" (
    p_PromotionName IN NVARCHAR2,
    p_DiscountAmount IN NUMBER,
    p_StartDate IN DATE,
    p_EndDate IN DATE
)
IS
BEGIN
    INSERT INTO Promotions (PromotionName, DiscountAmount, StartDate, EndDate)
    VALUES (p_PromotionName, p_DiscountAmount, p_StartDate, p_EndDate);
    COMMIT;
END InsertPromotion;

/
--------------------------------------------------------
--  DDL for Procedure INSERTREVIEW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."INSERTREVIEW" (
    p_UserID IN NUMBER,
    p_ProductID IN NUMBER,
    p_Rating IN NUMBER,
    p_Comments IN NVARCHAR2,
    p_Timestamp IN TIMESTAMP,
    p_ReviewID OUT NUMBER
)
IS
BEGIN
    INSERT INTO Product_Reviews(UserID, ProductID, Rating, Comments, Timestamp)
    VALUES (p_UserID, p_ProductID, p_Rating, p_Comments, p_Timestamp)
    RETURNING ReviewID INTO p_ReviewID; 

    COMMIT;
END InsertReview;

/
--------------------------------------------------------
--  DDL for Procedure INSERTREWARD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."INSERTREWARD" (
    p_UserID IN NUMBER,
    p_Points IN NUMBER,
    p_RewardID OUT NUMBER
) AS
BEGIN
    INSERT INTO Rewards(UserID, Points)
    VALUES (p_UserID, p_Points)
    RETURNING RewardID INTO p_RewardID;

    COMMIT;
END InsertReward;

/
--------------------------------------------------------
--  DDL for Procedure INSERTROLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."INSERTROLE" (
    p_RoleName IN NVARCHAR2,
    p_RoleID OUT NUMBER
)
IS
BEGIN    
    INSERT INTO Roles (
        RoleName
    ) VALUES (
        p_RoleName
    ) RETURNING RoleID INTO p_RoleID;

    COMMIT;
END InsertRole;

/
--------------------------------------------------------
--  DDL for Procedure INSERTUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."INSERTUSER" (
    p_username IN NVARCHAR2,
    p_password IN NVARCHAR2,
    p_email IN NVARCHAR2,
    p_firstName IN NVARCHAR2,
    p_lastName IN NVARCHAR2,
    p_address IN NVARCHAR2,
    p_phone IN NVARCHAR2,    
    p_userId OUT NUMBER
)
IS
BEGIN    
    INSERT INTO Users (
        Username, Password, Email, FirstName, LastName, Address, Phone, Enabled
    ) VALUES (
        p_username, p_password, p_email, p_firstName, p_lastName, p_address, p_phone, 1
    ) RETURNING UserID INTO p_userId;

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END InsertUser;

/
--------------------------------------------------------
--  DDL for Procedure INSERTUSERROLES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."INSERTUSERROLES" (
    p_UserID IN NUMBER,
    p_RoleID IN NUMBER,
    p_UserRoleID OUT NUMBER
)
AS
BEGIN
    INSERT INTO User_Roles(UserID, RoleID)
    VALUES (p_UserID, p_RoleID)
    RETURNING User_RoleID INTO p_UserRoleID;
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure REVOKEROLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."REVOKEROLE" (
   p_UserRoleID IN NUMBER,
   p_RowsAffected OUT NUMBER
) AS
BEGIN
   DELETE FROM User_Roles
   WHERE User_RoleID = p_UserRoleID;

   p_RowsAffected := SQL%ROWCOUNT;
END RevokeRole;

/
--------------------------------------------------------
--  DDL for Procedure UPDATECATEGORY
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."UPDATECATEGORY" (
    p_CategoryID IN NUMBER,
    p_CategoryName IN NVARCHAR2,
    p_Enabled IN NUMBER
)
IS
    pIsUpdated NUMBER := 0;
BEGIN
    SELECT COUNT(*)
    INTO pIsUpdated
    FROM Categories
    WHERE CategoryID = p_CategoryID;

    IF pIsUpdated = 1 THEN
        UPDATE Categories
        SET
            CategoryName = p_CategoryName,
            Enabled = p_Enabled
        WHERE CategoryID = p_CategoryID;
    END IF;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATENOTIFICATIONS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."UPDATENOTIFICATIONS" (
    p_NOTIFICATIONID IN NUMBER,
    p_USERID IN NUMBER,
    p_Message IN NVARCHAR2,
    p_TIMESTAMP IN TIMESTAMP
) AS
BEGIN

    UPDATE Notifications
    SET
        Message = p_Message,
        Timestamp = p_TIMESTAMP
    WHERE
        NotificationID = p_NOTIFICATIONID
        AND UserID = p_USERID;



EXCEPTION
    WHEN OTHERS THEN

        RAISE;
END UpdateNotifications;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEORDER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."UPDATEORDER" (
    p_OrderID IN NUMBER,
    p_UserID IN NUMBER,
    p_TotalAmount IN NUMBER,
    p_PaymentMethodID IN NUMBER,
    p_ShippingMethodID IN NUMBER
)
IS
BEGIN
    UPDATE Orders
    SET UserID = p_UserID,
        TotalAmount = p_TotalAmount,
        PaymentMethodID = p_PaymentMethodID,
        ShippingMethodID = p_ShippingMethodID
    WHERE OrderID = p_OrderID;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEPAYMENTMETHOD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."UPDATEPAYMENTMETHOD" (
    p_PaymentMethodID IN NUMBER,
    p_PaymentMethodName IN NVARCHAR2,
    p_Enabled IN NUMBER,
    p_WasUpdated OUT NUMBER
)
IS
BEGIN
    p_WasUpdated := 0;

    UPDATE Payment_Methods
    SET PaymentMethodName = p_PaymentMethodName,
        Enabled = p_Enabled
    WHERE PaymentMethodID = p_PaymentMethodID;

    IF SQL%ROWCOUNT > 0 THEN
        p_WasUpdated := 1; 
    END IF;

    COMMIT;
END UpdatePaymentMethod;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEPRODUCT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."UPDATEPRODUCT" (
    pProductID IN NUMBER,
    pName IN NVARCHAR2,
    pDescription IN NVARCHAR2,
    pPrice IN NUMBER,
    pStockQuantity IN NUMBER,
    pCategoryId IN NUMBER,
    pIsUpdated OUT NUMBER
)
IS
BEGIN
    pIsUpdated := 0; 

    SELECT COUNT(*)
    INTO pIsUpdated
    FROM products
    WHERE productId = pproductId;

    IF pIsUpdated = 1 THEN        
        UPDATE products
        SET
            name = pName,
            description = pDescription,
            price = pPrice,
            stockquantity = pStockQuantity,
            categoryId = pCategoryId
        WHERE productId = pproductId;
    END IF;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEPROMOTION
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."UPDATEPROMOTION" (
    p_PromotionID IN NUMBER,
    p_PromotionName IN NVARCHAR2,
    p_DiscountAmount IN NUMBER,
    p_StartDate IN DATE,
    p_EndDate IN DATE
)
IS
BEGIN
    UPDATE Promotions
    SET PromotionName = p_PromotionName,
        DiscountAmount = p_DiscountAmount,
        StartDate = p_StartDate,
        EndDate = p_EndDate
    WHERE PromotionID = p_PromotionID;
    COMMIT;
END UpdatePromotion;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEREVIEW
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."UPDATEREVIEW" (
    p_ReviewID IN NUMBER,
    p_Rating IN NUMBER,
    p_Comments IN NVARCHAR2
)
IS
BEGIN
    UPDATE Product_Reviews
    SET Rating = p_Rating, Comments = p_Comments
    WHERE ReviewID = p_ReviewID;
    COMMIT;
END UpdateReview;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEREWARD
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."UPDATEREWARD" (
    p_RewardID IN Rewards.RewardID%TYPE,
    p_UserID IN Rewards.UserID%TYPE,
    p_Points IN Rewards.Points%TYPE
) AS
BEGIN
    UPDATE Rewards
    SET UserID = p_UserID,
        Points = p_Points
    WHERE RewardID = p_RewardID;
    COMMIT;
END UpdateReward;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEROLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."UPDATEROLE" (
    p_RoleID IN NUMBER,
    p_RoleName IN NVARCHAR2,
    p_WasUpdated OUT NUMBER
)
IS
BEGIN
    p_WasUpdated := 0;

    UPDATE Roles
    SET RoleName = p_RoleName
    WHERE RoleID = p_RoleID;

    IF SQL%ROWCOUNT > 0 THEN
        p_WasUpdated := 1;
    END IF;

    COMMIT;
END UpdateRole;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."UPDATEUSER" (
    pUserID IN NUMBER,
    pUsername IN NVARCHAR2,
    pPassword IN NVARCHAR2,
    pEmail IN NVARCHAR2,
    pFirstName IN NVARCHAR2,
    pLastName IN NVARCHAR2,
    pAddress IN NVARCHAR2,
    pPhone IN NVARCHAR2,
    pIsUpdated OUT NUMBER
)
IS
BEGIN
    pIsUpdated := 0; 

    SELECT COUNT(*)
    INTO pIsUpdated
    FROM Users
    WHERE UserID = pUserID;

    IF pIsUpdated = 1 THEN        
        UPDATE Users
        SET
            Username = pUsername,
            Password = pPassword,
            Email = pEmail,
            FirstName = pFirstName,
            LastName = pLastName,
            Address = pAddress,
            Phone = pPhone
        WHERE UserID = pUserID;
    END IF;
END;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEUSERROLES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."UPDATEUSERROLES" (
    p_UserRoleID IN NUMBER,
    p_UserID IN NUMBER,
    p_RoleID IN NUMBER,
    p_Success OUT NUMBER
)
AS
BEGIN
    UPDATE User_Roles
    SET UserID = p_UserID, RoleID = p_RoleID
    WHERE User_RoleID = p_UserRoleID;

    IF SQL%ROWCOUNT > 0 THEN
        p_Success := 1; -- Updated
    ELSE
        p_Success := 0; -- Not updated
    END IF;
    COMMIT;
END;

/
--------------------------------------------------------
--  DDL for Procedure USERLOGIN
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "CRAVYDEV"."USERLOGIN" (
    pUsername IN NVARCHAR2,
    pPassword IN NVARCHAR2,
    pUser OUT SYS_REFCURSOR
)
IS
    vUserID NUMBER;
BEGIN
    OPEN pUser FOR
    SELECT *
    FROM Users
    WHERE Username = pUsername
    AND Password = pPassword;

    SELECT UserID
    INTO vUserID
    FROM Users
    WHERE Username = pUsername AND Password = pPassword AND enabled = 1;

    IF vUserID IS NOT NULL THEN
        UPDATE Users
        SET Last_Login = SYSDATE
        WHERE UserID = vUserID;
    END IF;
END;

/
--------------------------------------------------------
--  DDL for Function ADDTOCART
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."ADDTOCART" (p_UserID NUMBER, p_ProductID NUMBER, p_Quantity NUMBER) RETURN NUMBER IS
  v_CartID NUMBER;
BEGIN
  -- Obtener el carrito del usuario o crear uno nuevo
  SELECT CartID INTO v_CartID FROM Cart WHERE UserID = p_UserID;
  IF v_CartID IS NULL THEN
    INSERT INTO Cart (UserID) VALUES (p_UserID) RETURNING CartID INTO v_CartID;
  END IF;

  -- Agregar el producto al carrito
  INSERT INTO Cart_Items (CartID, ProductID, Quantity)
  VALUES (v_CartID, p_ProductID, p_Quantity);

  RETURN v_CartID;
END AddToCart;

/
--------------------------------------------------------
--  DDL for Function APPLYPROMOTIONTOORDER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."APPLYPROMOTIONTOORDER" (p_OrderID NUMBER, p_PromotionID NUMBER) RETURN NUMBER IS
  v_AppliedPromotionID NUMBER;
BEGIN
  -- Aplicar la promoción al pedido
  INSERT INTO Applied_Promotions (OrderID, PromotionID)
  VALUES (p_OrderID, p_PromotionID)
  RETURNING AppliedPromotionID INTO v_AppliedPromotionID;

  RETURN v_AppliedPromotionID;
END ApplyPromotionToOrder;

/
--------------------------------------------------------
--  DDL for Function AVERAGEQUANTITYPERORDER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."AVERAGEQUANTITYPERORDER" RETURN NUMBER IS
  avgQuantity NUMBER;
BEGIN
  SELECT AVG(oi.Quantity) INTO avgQuantity
  FROM Order_Items oi;

  RETURN avgQuantity;
END AverageQuantityPerOrder;

/
--------------------------------------------------------
--  DDL for Function BESTSELLINGPRODUCTS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."BESTSELLINGPRODUCTS" RETURN SYS_REFCURSOR IS
  cur SYS_REFCURSOR;
BEGIN
  OPEN cur FOR
    SELECT oi.ProductID, COUNT(oi.OrderItemID) AS QuantitySold
    FROM Order_Items oi
    GROUP BY oi.ProductID
    ORDER BY QuantitySold DESC;

  RETURN cur;
END BestSellingProducts;

/
--------------------------------------------------------
--  DDL for Function CALCULATETOTALREWARDS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."CALCULATETOTALREWARDS" (p_UserID NUMBER) RETURN NUMBER IS
  v_TotalRewards NUMBER;
BEGIN
  -- Calcular el total de recompensas del usuario
  SELECT NVL(SUM(Points), 0)
    INTO v_TotalRewards
    FROM Rewards
   WHERE UserID = p_UserID;

  RETURN v_TotalRewards;
END CalculateTotalRewards;

/
--------------------------------------------------------
--  DDL for Function GETAVAILABLEPROMOTIONS
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."GETAVAILABLEPROMOTIONS" RETURN SYS_REFCURSOR IS
  v_Cursor SYS_REFCURSOR;
BEGIN
  -- Obtener las promociones disponibles
  OPEN v_Cursor FOR
    SELECT *
      FROM Promotions
     WHERE StartDate <= SYSDATE AND EndDate >= SYSDATE;

  RETURN v_Cursor;
END GetAvailablePromotions;

/
--------------------------------------------------------
--  DDL for Function GETAVERAGERATINGFORPRODUCT
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."GETAVERAGERATINGFORPRODUCT" (p_ProductID NUMBER) RETURN NUMBER IS
  v_AverageRating NUMBER;
BEGIN
  -- Calcular la puntuación promedio para un producto
  SELECT NVL(AVG(Rating), 0)
    INTO v_AverageRating
    FROM Product_Reviews
   WHERE ProductID = p_ProductID;

  RETURN v_AverageRating;
END GetAverageRatingForProduct;

/
--------------------------------------------------------
--  DDL for Function GETORDERHISTORY
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."GETORDERHISTORY" (p_UserID NUMBER) RETURN SYS_REFCURSOR IS
  v_Cursor SYS_REFCURSOR;
BEGIN
  -- Obtener el historial de pedidos del usuario
  OPEN v_Cursor FOR
    SELECT *
      FROM Orders
     WHERE UserID = p_UserID
  ORDER BY OrderDate DESC;

  RETURN v_Cursor;
END GetOrderHistory;

/
--------------------------------------------------------
--  DDL for Function GETREWARDPOINTSFORORDER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."GETREWARDPOINTSFORORDER" (p_OrderID NUMBER) RETURN NUMBER IS
  v_TotalPoints NUMBER;
BEGIN
  -- Calcular el total de puntos de recompensa para un pedido
  SELECT NVL(SUM(p.Price * oi.Quantity), 0)
    INTO v_TotalPoints
    FROM Order_Items oi
         JOIN Products p ON oi.ProductID = p.ProductID
   WHERE oi.OrderID = p_OrderID;

  RETURN ROUND(v_TotalPoints);
END GetRewardPointsForOrder;

/
--------------------------------------------------------
--  DDL for Function HASAVAILABLEREWARD
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."HASAVAILABLEREWARD" (p_UserID NUMBER) RETURN BOOLEAN IS
  v_TotalRewards NUMBER;
BEGIN
  -- Verificar si el usuario tiene recompensas disponibles
  SELECT NVL(SUM(Points), 0)
    INTO v_TotalRewards
    FROM Rewards
   WHERE UserID = p_UserID;

  RETURN v_TotalRewards > 0;
END HasAvailableReward;

/
--------------------------------------------------------
--  DDL for Function MOSTEXPENSIVESHIPPING
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."MOSTEXPENSIVESHIPPING" RETURN SYS_REFCURSOR IS
  cur SYS_REFCURSOR;
BEGIN
  OPEN cur FOR
    SELECT ShippingMethodName, MAX(ShippingCost) AS MaxShippingCost
    FROM Shipping_Methods;

  RETURN cur;
END MostExpensiveShipping;

/
--------------------------------------------------------
--  DDL for Function PLACEORDER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."PLACEORDER" (p_UserID NUMBER, p_PaymentMethodID NUMBER, p_ShippingMethodID NUMBER) RETURN NUMBER IS
  v_OrderID NUMBER;
  v_TotalAmount NUMBER(10, 2);
BEGIN
  -- Calcular el total del carrito
  SELECT NVL(SUM(p.Price * ci.Quantity), 0)
    INTO v_TotalAmount
    FROM Cart_Items ci
         JOIN Products p ON ci.ProductID = p.ProductID
   WHERE ci.CartID = (SELECT CartID FROM Cart WHERE UserID = p_UserID);

  -- Crear el pedido
  INSERT INTO Orders (UserID, TotalAmount, PaymentMethodID, ShippingMethodID)
  VALUES (p_UserID, v_TotalAmount, p_PaymentMethodID, p_ShippingMethodID)
  RETURNING OrderID INTO v_OrderID;

  -- Mover elementos del carrito al pedido
  INSERT INTO Order_Items (OrderID, ProductID, Quantity, Subtotal)
  SELECT v_OrderID, ci.ProductID, ci.Quantity, p.Price * ci.Quantity
    FROM Cart_Items ci
         JOIN Products p ON ci.ProductID = p.ProductID
   WHERE ci.CartID = (SELECT CartID FROM Cart WHERE UserID = p_UserID);

  -- Limpiar el carrito
  DELETE FROM Cart_Items WHERE CartID = (SELECT CartID FROM Cart WHERE UserID = p_UserID);

  RETURN v_OrderID;
END PlaceOrder;

/
--------------------------------------------------------
--  DDL for Function SENDNOTIFICATION
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."SENDNOTIFICATION" (
  p_UserID NUMBER,
  p_Message NVARCHAR2
) RETURN BOOLEAN IS
BEGIN
  -- Enviar una notificación al usuario
  INSERT INTO Notifications (UserID, Message, Timestamp)
  VALUES (p_UserID, p_Message, SYSTIMESTAMP);

  RETURN TRUE;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END SendNotification;

/
--------------------------------------------------------
--  DDL for Function TOTALSALESBYSHIPPING
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."TOTALSALESBYSHIPPING" RETURN NUMBER IS
  totalSales NUMBER(10, 2);
BEGIN
  SELECT SUM(o.TotalAmount) INTO totalSales
  FROM Orders o
  JOIN Shipping_Methods sm ON o.ShippingMethodID = sm.ShippingMethodID;

  RETURN totalSales;
END TotalSalesByShipping;

/
--------------------------------------------------------
--  DDL for Function TOTALSALESBYUSER
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE FUNCTION "CRAVYDEV"."TOTALSALESBYUSER" (userID IN NUMBER) RETURN NUMBER IS
  totalSales NUMBER(10, 2);
BEGIN
  SELECT SUM(o.TotalAmount) INTO totalSales
  FROM Orders o
  WHERE o.UserID = userID;

  RETURN totalSales;
END TotalSalesByUser;

/
--------------------------------------------------------
--  Constraints for Table REWARDS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."REWARDS" MODIFY ("REWARDID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."REWARDS" MODIFY ("POINTS" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."REWARDS" ADD PRIMARY KEY ("REWARDID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USER_ROLES
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."USER_ROLES" MODIFY ("USER_ROLEID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."USER_ROLES" MODIFY ("USERID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."USER_ROLES" MODIFY ("ROLEID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."USER_ROLES" ADD PRIMARY KEY ("USER_ROLEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
  ALTER TABLE "CRAVYDEV"."USER_ROLES" ADD CONSTRAINT "UC_USER_ROLES_USERID_ROLEID" UNIQUE ("USERID", "ROLEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRODUCTS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."PRODUCTS" MODIFY ("PRODUCTID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."PRODUCTS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."PRODUCTS" MODIFY ("PRICE" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."PRODUCTS" MODIFY ("STOCKQUANTITY" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."PRODUCTS" MODIFY ("CATEGORYID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."PRODUCTS" ADD PRIMARY KEY ("PRODUCTID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CART_ITEMS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."CART_ITEMS" MODIFY ("CARTITEMID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."CART_ITEMS" MODIFY ("QUANTITY" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."CART_ITEMS" ADD PRIMARY KEY ("CARTITEMID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PRODUCT_REVIEWS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."PRODUCT_REVIEWS" MODIFY ("REVIEWID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."PRODUCT_REVIEWS" MODIFY ("RATING" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."PRODUCT_REVIEWS" ADD PRIMARY KEY ("REVIEWID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."USERS" MODIFY ("USERID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."USERS" MODIFY ("USERNAME" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."USERS" MODIFY ("PASSWORD" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."USERS" MODIFY ("EMAIL" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."USERS" ADD PRIMARY KEY ("USERID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
  ALTER TABLE "CRAVYDEV"."USERS" ADD UNIQUE ("USERNAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
  ALTER TABLE "CRAVYDEV"."USERS" ADD UNIQUE ("EMAIL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PAYMENT_METHODS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."PAYMENT_METHODS" MODIFY ("PAYMENTMETHODID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."PAYMENT_METHODS" MODIFY ("PAYMENTMETHODNAME" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."PAYMENT_METHODS" ADD PRIMARY KEY ("PAYMENTMETHODID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CATEGORIES
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."CATEGORIES" MODIFY ("CATEGORYID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."CATEGORIES" MODIFY ("CATEGORYNAME" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."CATEGORIES" ADD PRIMARY KEY ("CATEGORYID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table SHIPPING_METHODS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."SHIPPING_METHODS" MODIFY ("SHIPPINGMETHODID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."SHIPPING_METHODS" MODIFY ("SHIPPINGMETHODNAME" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."SHIPPING_METHODS" ADD PRIMARY KEY ("SHIPPINGMETHODID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table PROMOTIONS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."PROMOTIONS" MODIFY ("PROMOTIONID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."PROMOTIONS" MODIFY ("PROMOTIONNAME" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."PROMOTIONS" MODIFY ("DISCOUNTAMOUNT" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."PROMOTIONS" ADD PRIMARY KEY ("PROMOTIONID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ORDER_ITEMS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."ORDER_ITEMS" MODIFY ("ORDERITEMID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."ORDER_ITEMS" MODIFY ("QUANTITY" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."ORDER_ITEMS" ADD PRIMARY KEY ("ORDERITEMID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ORDERS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."ORDERS" MODIFY ("ORDERID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."ORDERS" ADD PRIMARY KEY ("ORDERID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table ROLES
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."ROLES" MODIFY ("ROLEID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."ROLES" MODIFY ("ROLENAME" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."ROLES" ADD PRIMARY KEY ("ROLEID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table CART
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."CART" MODIFY ("CARTID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."CART" ADD PRIMARY KEY ("CARTID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table APPLIED_PROMOTIONS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."APPLIED_PROMOTIONS" MODIFY ("APPLIEDPROMOTIONID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."APPLIED_PROMOTIONS" ADD PRIMARY KEY ("APPLIEDPROMOTIONID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Constraints for Table NOTIFICATIONS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."NOTIFICATIONS" MODIFY ("NOTIFICATIONID" NOT NULL ENABLE);
  ALTER TABLE "CRAVYDEV"."NOTIFICATIONS" ADD PRIMARY KEY ("NOTIFICATIONID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 
  TABLESPACE "CRAVYPIZZAHUB"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table APPLIED_PROMOTIONS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."APPLIED_PROMOTIONS" ADD CONSTRAINT "FK_APPLIED_PROMOTIONS_ORDERID" FOREIGN KEY ("ORDERID")
    REFERENCES "CRAVYDEV"."ORDERS" ("ORDERID") ENABLE;
  ALTER TABLE "CRAVYDEV"."APPLIED_PROMOTIONS" ADD CONSTRAINT "FK_APPLIED_PROMOTIONS_PROMOTIONID" FOREIGN KEY ("PROMOTIONID")
    REFERENCES "CRAVYDEV"."PROMOTIONS" ("PROMOTIONID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CART
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."CART" ADD CONSTRAINT "FK_CART_USERID" FOREIGN KEY ("USERID")
    REFERENCES "CRAVYDEV"."USERS" ("USERID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table CART_ITEMS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."CART_ITEMS" ADD CONSTRAINT "FK_CART_ITEMS_CARTID" FOREIGN KEY ("CARTID")
    REFERENCES "CRAVYDEV"."CART" ("CARTID") ENABLE;
  ALTER TABLE "CRAVYDEV"."CART_ITEMS" ADD CONSTRAINT "FK_CART_ITEMS_PRODUCTID" FOREIGN KEY ("PRODUCTID")
    REFERENCES "CRAVYDEV"."PRODUCTS" ("PRODUCTID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table NOTIFICATIONS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."NOTIFICATIONS" ADD CONSTRAINT "FK_NOTIFICATIONS_USERID" FOREIGN KEY ("USERID")
    REFERENCES "CRAVYDEV"."USERS" ("USERID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ORDERS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."ORDERS" ADD CONSTRAINT "FK_ORDERS_USERID" FOREIGN KEY ("USERID")
    REFERENCES "CRAVYDEV"."USERS" ("USERID") ENABLE;
  ALTER TABLE "CRAVYDEV"."ORDERS" ADD CONSTRAINT "FK_ORDERS_PAYMENTMETHODID" FOREIGN KEY ("PAYMENTMETHODID")
    REFERENCES "CRAVYDEV"."PAYMENT_METHODS" ("PAYMENTMETHODID") ENABLE;
  ALTER TABLE "CRAVYDEV"."ORDERS" ADD CONSTRAINT "FK_ORDERS_SHIPPINGMETHODID" FOREIGN KEY ("SHIPPINGMETHODID")
    REFERENCES "CRAVYDEV"."SHIPPING_METHODS" ("SHIPPINGMETHODID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table ORDER_ITEMS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."ORDER_ITEMS" ADD CONSTRAINT "FK_ORDER_ITEMS_ORDERID" FOREIGN KEY ("ORDERID")
    REFERENCES "CRAVYDEV"."ORDERS" ("ORDERID") ENABLE;
  ALTER TABLE "CRAVYDEV"."ORDER_ITEMS" ADD CONSTRAINT "FK_ORDER_ITEMS_PRODUCTID" FOREIGN KEY ("PRODUCTID")
    REFERENCES "CRAVYDEV"."PRODUCTS" ("PRODUCTID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUCTS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."PRODUCTS" ADD CONSTRAINT "FK_PRODUCTS_CATEGORYID" FOREIGN KEY ("CATEGORYID")
    REFERENCES "CRAVYDEV"."CATEGORIES" ("CATEGORYID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table PRODUCT_REVIEWS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."PRODUCT_REVIEWS" ADD CONSTRAINT "FK_PRODUCT_REVIEWS_USERID" FOREIGN KEY ("USERID")
    REFERENCES "CRAVYDEV"."USERS" ("USERID") ENABLE;
  ALTER TABLE "CRAVYDEV"."PRODUCT_REVIEWS" ADD CONSTRAINT "FK_PRODUCT_REVIEWS_PRODUCTID" FOREIGN KEY ("PRODUCTID")
    REFERENCES "CRAVYDEV"."PRODUCTS" ("PRODUCTID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table REWARDS
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."REWARDS" ADD CONSTRAINT "FK_REWARDS_USERID" FOREIGN KEY ("USERID")
    REFERENCES "CRAVYDEV"."USERS" ("USERID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USER_ROLES
--------------------------------------------------------

  ALTER TABLE "CRAVYDEV"."USER_ROLES" ADD CONSTRAINT "FK_USER_ROLES_USERID" FOREIGN KEY ("USERID")
    REFERENCES "CRAVYDEV"."USERS" ("USERID") ENABLE;
  ALTER TABLE "CRAVYDEV"."USER_ROLES" ADD CONSTRAINT "FK_USER_ROLES_ROLEID" FOREIGN KEY ("ROLEID")
    REFERENCES "CRAVYDEV"."ROLES" ("ROLEID") ENABLE;
