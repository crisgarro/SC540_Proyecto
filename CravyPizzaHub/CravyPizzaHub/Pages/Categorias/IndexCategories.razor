@page "/categories_list"
@using Backend.Models
@using Backend.Services
@inject IDialogService DialogService

<MudContainer>
    <MudText Typo="Typo.h3" GutterBottom="true">Categorías</MudText>
    <MudText Class="mb-8">Categorías Soportadas por el Sistema</MudText>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddItem">Nueva Categoría</MudButton>
    <MudDataGrid T="CategoryModel" Items="@_categories" QuickFilter="@QuickFilter" Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Categorías</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Hidden="true" Property="x => x.CategoryID" />
            <PropertyColumn Title="Categoría" Property="x => x.CategoryName" />
            <PropertyColumn Title="Habilitado" Property="x => x.Enabled">
                <CellTemplate>
                    @if (@context.Item.Enabled == 1)
                    {
                        <span>Si</span>
                    }
                    else
                    {
                        <span>No</span>
                    }
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Title="Acción" Property="x => x.Enabled">
                <CellTemplate>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => EditItem(@context.Item))">Editar</MudButton>
                </CellTemplate>
            </PropertyColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="CategoryModel" PageSizeOptions="new int[] { 20, 50 }" RowsPerPageString="Registros Por Página" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private IEnumerable<CategoryModel> _categories;
    private readonly CategoryService _service = new();
    private string _searchString;

    private async Task LoadCategories()
    {
        _categories = await _service.GetAllCategories();
    }

    private Func<CategoryModel, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.CategoryName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task AddItem()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<AddEditCategory>("Dialog", options);
        var result = await dialog.Result;
        await LoadCategories();
    }

    private async Task EditItem(CategoryModel model)
    {
        var parameters = new DialogParameters
        {
            { "EditMode", true },
            { "ExistingRecord", model }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<AddEditCategory>("Dialog", parameters, options);
        var result = await dialog.Result;
        await LoadCategories();
    }
}
