@page "/user_list"
@using Backend.Models
@using Backend.Services
@inject IDialogService DialogService

<MudContainer>
    <MudText Typo="Typo.h3" GutterBottom="true">Administracion de Usuarios</MudText>
    <MudText Class="mb-8">Aqui se desplegara una lista de los usuarios en el sistema</MudText>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="OpenAddUserDialog">Agregar Usuario</MudButton>
    <MudTable Items="_users" T="UserModel" Hover="true">
        <HeaderContent>                        
            <MudTh>Nombre Usuario</MudTh>
            <MudTh>Nombre</MudTh>
            <MudTh>Apellido</MudTh>
            <MudTh>Correo</MudTh>
            <MudTh></MudTh> 
        </HeaderContent>
        <RowTemplate>            
            <MudTd Style="display: none;">@context.UserID</MudTd>
            <MudTd>@context.Username</MudTd>
            <MudTd>@context.Email</MudTd>
            <MudTd>@context.FirstName</MudTd>
            <MudTd>@context.LastName</MudTd>
            <MudTd>
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="() => EditUser(context)">Editar</MudButton>
                @if (context.Enabled)
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="() => DisableUser(context, false)">Deshabilitar</MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="() => DisableUser(context, true)">Habilitar</MudButton>
                }
            </MudTd>
        </RowTemplate>
    </MudTable>
</MudContainer>

@code {

    private List<UserModel> _users;
    private readonly UserService _service = new();

    private async void LoadUsers()
    {
        _users = await _service.GetAllUsers();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        LoadUsers();
        await base.OnInitializedAsync();
    }

    private async Task EditUser(UserModel user)
    {
        var parameters = new DialogParameters
        {
            { "EditMode", true },
            { "ExistingUser", user }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<AddUser>("Dialog", parameters, options);
        var result = await dialog.Result;
        LoadUsers();

    }

    private async void DisableUser(UserModel user, bool state)
    {           
        var action = state ? "habilitado" : "deshabilitado";
        var dialogResult = await DialogService.ShowMessageBox("Confirmacion", $"Esta seguro que desea establecer al usuario {user.Username} como {action}?", yesText: "Si", cancelText: "Cancelar");
        if (dialogResult is not null)
        {
            var dialogMessage = "";
            var result = await _service.DisableUser(user, state);
            dialogMessage = result is not null ? $"El usuario {user.Username} se ha {action} con exito" : $"El usuario {user.Username} no se ha {action}";

            var dialog2 = await DialogService.ShowMessageBox("Deshabilitar usuario", dialogMessage, yesText: "Ok");
            LoadUsers();
        }
    }

    private async Task OpenAddUserDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small };


        var dialog = DialogService.Show<AddUser>("Dialog", options);
        var result = await dialog.Result;
        LoadUsers();
    }

}