@page "/payment_methods"
@using Backend.Models
@using Backend.Services

<MudContainer>
    <MudText Typo="Typo.h3" GutterBottom="true">Metodos de Pago</MudText>
    <MudText Class="mb-8">Metodos de Pago Soportados por el Sistema</MudText>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="OpenDialogAddPaymentMethod">Nuevo Metodo de Pago</MudButton>
    <MudDataGrid T="PaymentMethodModel" Items="@_paymentMethods" SortMode="SortMode.Multiple" Filterable="true" QuickFilter="@QuickFilter" Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Metodos de Pago</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="Nr" Sortable="false" Filterable="false"/>
            <PropertyColumn Property="x => x.PaymentMethodID"/>
            <PropertyColumn Property="x => x.PaymentMethodName"/>
            <PropertyColumn Property="x => x.Enabled"/>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="PaymentMethodModel" PageSizeOptions="new int[] { 20, 50}" RowsPerPageString="Registros Por Pagina" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private List<PaymentMethodModel> _paymentMethods;
    private readonly PaymentMethodService _service = new();
    private string _searchString;

    private async void LoadPaymentMethods()
    {
        _paymentMethods = await _service.GetAllPaymentMethods();
        if (_paymentMethods.Count > 0)
        {
            StateHasChanged();
        }
    }
    

    private Func<PaymentMethodModel, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.PaymentMethodName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        LoadPaymentMethods();
        await base.OnInitializedAsync();
    }
    

    private async Task OpenDialogAddPaymentMethod()
    {

    }

}