@page "/payment_methods"
@using Backend.Models
@using Backend.Services
@inject IDialogService DialogService

<MudContainer>
    <MudText Typo="Typo.h3" GutterBottom="true">Metodos de Pago</MudText>
    <MudText Class="mb-8">Metodos de Pago Soportados por el Sistema</MudText>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddItem">Nuevo Metodo de Pago</MudButton>
    <MudDataGrid T="PaymentMethodModel" Items="@_paymentMethods" QuickFilter="@QuickFilter" Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Metodos de Pago</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Hidden="true" Property="x => x.PaymentMethodID"/>
            <PropertyColumn Title="Metodo de Pago" Property="x => x.PaymentMethodName"/>
            <PropertyColumn Title="Habilitado" Property="x => x.Enabled">
                <CellTemplate>
                    @if (@context.Item.Enabled == 1)
                    {
                        <span>Si</span>
                    }
                    else
                    {
                        <span>No</span>
                    }
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Title="Accion" Property="x => x.Enabled">
                <CellTemplate>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => EditItem(@context.Item))">Editar</MudButton>
                </CellTemplate>
            </PropertyColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="PaymentMethodModel" PageSizeOptions="new int[] { 20, 50 }" RowsPerPageString="Registros Por Pagina"/>
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private IEnumerable<PaymentMethodModel> _paymentMethods;
    private readonly PaymentMethodService _service = new();
    private string _searchString;

    private async Task LoadPaymentMethods()
    {
        _paymentMethods = await _service.GetAllPaymentMethods();
    }

    private Func<PaymentMethodModel, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        if (x.PaymentMethodName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadPaymentMethods();
    }


    private async Task AddItem()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<AddPaymentMethod>("Dialog", options);
        var result = await dialog.Result;
        await LoadPaymentMethods();
    }


    private async Task EditItem(PaymentMethodModel model)
    {
        var parameters = new DialogParameters
        {
            { "EditMode", true },
            { "ExistingRecord", model }
        };
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<AddPaymentMethod>("Dialog", parameters, options);
        var result = await dialog.Result;
        await LoadPaymentMethods();
    }



}