@page "/user_roles"
@using Backend.Models
@using Backend.Services
@inject IDialogService DialogService

<MudContainer>
    <MudText Typo="Typo.h3" GutterBottom="true">Asignar Roles a Usuarios</MudText>
    <MudText Class="mb-8">Asignar roles a usuarios del sistema</MudText>

    <!-- User Dropdown -->
    <MudSelect Label="Usuario" @bind-Value="_selectedUserId">
        @foreach (var user in _userList)
        {
            <MudSelectItem T="int" Text="@user.Username" Value="@user.UserID" />
        }
    </MudSelect>

    <!-- Role Dropdown -->
    <MudSelect Label="Rol" @bind-Value="_selectedRoleId">
        @foreach (var role in _roleList)
        {
            <MudSelectItem T="int" Text="@role.RoleName" Value="@role.RoleId" />
        }
    </MudSelect>

    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AssignUserRole">Asignar Rol</MudButton>

    <!-- Display User Roles -->
    <MudDataGrid T="UserRoleModel" Items="@_userRoleList" Hideable="true">
        <Columns>
            <PropertyColumn Hidden="true" Property="x => x.UserRoleId" />
            <PropertyColumn Title="Usuario" Property="x => x.UserName" />
            <PropertyColumn Title="Rol" Property="x => x.RolName" />
            <PropertyColumn Title="Acción" Property="x => x.UserRoleId">
                <CellTemplate>
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(() => RemoveUserRole(@context.Item))">Quitar Rol</MudButton>
                </CellTemplate>
            </PropertyColumn>
        </Columns>
    </MudDataGrid>
</MudContainer>

@code {
    private IEnumerable<UserModel> _userList;
    private IEnumerable<RolModel> _roleList;
    private IEnumerable<UserRoleModel> _userRoleList;

    private readonly UserService _userService = new();
    private readonly RoleService _roleService = new();
    private readonly UserRoleService _userRoleService = new();

    private int _selectedUserId;
    private int _selectedRoleId;

    private async Task LoadData()
    {
        _userList = await _userService.GetAllUsers();
        _roleList = await _roleService.GetAllRoles();
        _userRoleList = await _userRoleService.GetAllUserRoles();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task AssignUserRole()
    {
        if (_selectedUserId != 0 && _selectedRoleId != 0)
        {
            var userRol = new UserRoleModel { RoleId = _selectedRoleId, UserId = _selectedUserId };
            var result = await _userRoleService.AssignUserRol(userRol);
            if (result > 0)
            {
                await LoadData();
                _selectedUserId = 0;
                _selectedRoleId = 0;
            }

        }
        else
        {
            // Display a message indicating that both user and role must be selected
        }
    }

    private async Task RemoveUserRole(UserRoleModel userRole)
    {
        var dialogResult = await DialogService.ShowMessageBox("Confirmación", $"¿Está seguro que desea quitar el rol {userRole.RoleName} al usuario {userRole.UserName}?", yesText: "Sí", cancelText: "Cancelar");
        if (dialogResult is not null)
        {
            var result = await _userRoleService.RevokeUserRol(userRole.UserRoleId);
            if (result)
            {
                await LoadData();
            }
            else
            {
                // Handle removal failure
            }
        }
    }
}
