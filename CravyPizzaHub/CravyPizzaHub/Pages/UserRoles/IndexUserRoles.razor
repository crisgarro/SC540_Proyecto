@page "/user_roles"
@using Backend.Models
@using Backend.Services
@inject IDialogService DialogService

<MudContainer>
    <MudText Typo="Typo.h3" GutterBottom="true">Lista de Roles de Usuario</MudText>
    <MudText Class="mb-8">Lista de Roles de Usuario del Sistema</MudText>    
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AssignRole">Asignar Rol a Usuario</MudButton>
    <MudDataGrid T="UserRoleModel" Items="@_userRoleList" QuickFilter="@QuickFilter" Hideable="true">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Roles de Usuario</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="_searchString" Placeholder="Buscar" Adornment="Adornment.Start" Immediate="true" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <Columns>
            <PropertyColumn Hidden="true" Property="x => x.UserRoleId" />
            <PropertyColumn Title="Usuario" Property="x => x.UserName" />
            <PropertyColumn Title="Rol" Property="x => x.RolName" />
            <PropertyColumn Title="Acción" Property="x => x.UserRoleId">
                <CellTemplate>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => RevokeRole(@context.Item))">Revokar</MudButton>                    
                </CellTemplate>
            </PropertyColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="UserRoleModel" PageSizeOptions="new int[] { 20, 50 }" RowsPerPageString="Registros Por Pagina" />
        </PagerContent>
    </MudDataGrid>
</MudContainer>

@code {
    private IEnumerable<UserRoleModel> _userRoleList;
    private readonly UserRoleService _userRoleService = new();
    private string _searchString;

    private async Task LoadUserRoles()
    {
        _userRoleList = await _userRoleService.GetAllUserRoles();        
    }

    private Func<UserRoleModel, bool> QuickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        //TODO: Search by Rol Name
        //if (x.RoleName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
        //    return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadUserRoles();
    }

    private async Task AssignRole()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Small };

        var dialog = DialogService.Show<AssignUserRole>("Dialog", options);
        var result = await dialog.Result;
        await LoadUserRoles();
    }

    private async Task RevokeRole(UserRoleModel userRole)
    {
        var dialogResult = await DialogService.ShowMessageBox("Confirmacion", $"Esta seguro que desea Revokar el Rol: {userRole.RolName} para el usuario: {userRole.UserName}?", yesText: "Si", cancelText: "Cancelar");
        if (dialogResult is not null)
        {
            var dialogMessage = "";
            var result = await _userRoleService.RevokeUserRol(userRole.UserRoleId);
            dialogMessage = result ? $"El rol: {userRole.RolName} fue revokado para el usuario {userRole.UserName}" : $"El rol {userRole.RolName} no se ha eliminado para el usuario: {userRole.UserName}";

            var dialog2 = await DialogService.ShowMessageBox("Revokar Rol a Usuario", dialogMessage, yesText: "Ok");
            await LoadUserRoles();
        }
        
    }    
}
